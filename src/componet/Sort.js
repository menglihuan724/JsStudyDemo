import React, {Component} from 'react';import * as d3 from 'd3';class Sort extends Component {    constructor(props) {        super(props);        this.state = {            colorRed: "#ff3d00",            colorYellow: "#ff9100",            colorBlue: "#00897b",            colorGreen: "#00e676",            selectd:'bubble'        };//设置state    }    componentWillMount() {        this.setState({            data: this.getSortData(),        });//设置state    }    componentDidMount() {        this.setState({            method: {                //选择排序                select: function* (data) {                    var length = data.length, indexMin;                    for (var i = 0; i < length - 1; i++) {                        indexMin = i;                        for (var j = i; j < length; j++) {                            data[j].color = this.state.colorYellow;                            yield data;                            if (data[indexMin].v > data[j].v) {                                indexMin = j;                            }                            this.resetColor(data);                        }                        if (i !== indexMin) {                            //交换                            data[indexMin].color = data[i].color = this.state.colorRed;                            yield data;                            let t = data[indexMin].v;                            data[indexMin].v = data[i].v;                            data[i].v = t;                            console.log("交换");                            yield data;                        }                        this.resetColor(data);                    }                },                //冒泡排序                bubble: function* (data) {                    var length = data.length;                    for (var i = 0; i < length; i++) {                        for (var j = 0; j < length - 1; j++) {                            data[j].color = this.state.colorYellow;                            yield data;                            if (data[j].v > data[j + 1].v) {                                //交换                                data[j].color = data[j + 1].color = this.state.colorRed;                                yield data;                                let t = data[j].v;                                data[j].v = data[j + 1].v;                                data[j + 1].v = t;                                console.log("交换");                                yield data;                            }                            this.resetColor(data);                        }                    }                },                //插入排序                insertion: function* (data) {                    var length = data.length, j, temp;                    for (var i = 1; i < length; i++) {                        j = i;                        temp = data[i];                        data[j].color = this.state.colorYellow;                        yield data;                        this.resetColor(data);                        while (j > 0 && data[j - 1].v > temp.v) {                            data[j] = data[j - 1];                            j--;                        }                        if (i !== j) {                            data[j] = temp;                            data[j].color = this.state.colorRed;                            data[i].color = this.state.colorRed;                            yield data;                            this.resetColor(data);                        }                    }                }            }        })    }    //获取原始数据    getSortData = (count = 8) => {        var arr = [], i = 0;        while (i++ < count) {            //10~100            let v = Math.floor((Math.random() * 90 + 10));            arr.push({v: v, color: this.state.colorBlue});        }        return arr;    }    //重置颜色    resetColor = (data) => {        data.forEach(v => {            v.color = this.state.colorBlue;        });    }    resetSort = () => {        this.setState({            data: this.getSortData(),        });        this.handleStart(this.state.selectd)    }    next = () => {        const iter = this.state.next;        let currentData = iter.next();        //console.log("next", currentData);        if (!currentData.done) {            this.setState({data: currentData.value});        }    }    select = (e) => {        this.setState({            selectd: e.target.value        })    }    handleStart = (select) => {        // var select = document.getElementById("select").value;//materialize的问题        //console.log("handleStart",select);        // if (!SortalGorithm.hasOwnProperty(select)) {        //     alert("无该排序方法");        //     return;        // }        //console.log(this.props);        /****************颜色归一**************/        var data = this.state.data.slice();        this.resetColor(data);        /************获取算法**************/        var iter = this.state.method[select].bind(this)(data);        this.setState({            next: iter        })    }    render() {        return (            <div>                <select onClick={this.select}>                    <option value='bubble'>bubble</option>                    <option value='insertion'>insertion</option>                    <option value='select'>select</option>                </select>                <div onClick={() => {                    this.handleStart(this.state.selectd)                }}>点击                </div>                <div onClick={this.next}>下一步                </div>                <div onClick={this.resetSort}>重置                </div>                <div style={{width: "100%", display: "flex", justifyContent: 'center'}}>                    <SortGraph data={this.state.data}/>                </div>            </div>        )    }}class SortGraph extends Component {    constructor(props) {        super(props);    }    render() {        //svg宽高        var paddingBottom = 30;        var height = 400;        var data = this.props.data;        //求比例变换        var dataV = data.map(v => {            return v.v        });        var min = Math.min(...dataV);        var max = Math.max(...dataV);        //console.log("render SortGraph",{max,min});        var linear = d3.scaleLinear().domain([0, max]).range([0, height - paddingBottom - 10]);        var w = 30;        var dom = data.map((value, i) => {            var h = linear(value.v);            var x = i * (w + 5);            var y = height - h - paddingBottom;            return (                <g key={i}>                    <Bar x={x} y={y} width={w} height={h} fill={value.color}/>                    <text x={x} y={y - 2} dx={w / 2} textAnchor="middle">{value.v}</text>                </g>);        });        var width = (w + 5) * data.length;        return (            <svg ref={(r) => this.chartRef = r} height={height} width={width} style={{paddingTop: '20px'}}                 className="center-align">                <g>                    {dom}                </g>            </svg>)    }}class Bar extends React.Component {    render() {        return (            <rect x={this.props.x} y={this.props.y} width={this.props.width} height={this.props.height}                  fill={this.props.fill}></rect>        );    }}export default Sort